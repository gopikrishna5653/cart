#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Structure for cart item
typedef struct CartItem {
    int id;
    char name[50];
    char category[30];
    float price;
    int quantity;
    struct CartItem* next;
} CartItem;

// Create a new item
CartItem* createItem(int id, const char* name, float price, int quantity, const char* category) {
    CartItem* newItem = (CartItem*)malloc(sizeof(CartItem));
    newItem->id = id;
    strcpy(newItem->name, name);
    strcpy(newItem->category, category);
    newItem->price = price;
    newItem->quantity = quantity;
    newItem->next = NULL;
    return newItem;
}

// Print current date (once)
void printCurrentDate() {
    time_t t;
    struct tm* tm_info;
    char date[20];
    time(&t);
    tm_info = localtime(&t);
    strftime(date, sizeof(date), "%Y-%m-%d", tm_info);
    printf("Date: %s\n", date);
}

// Add item to cart
void addItem(CartItem** head, int id, const char* name, float price, int quantity, const char* category) {
    CartItem* newItem = createItem(id, name, price, quantity, category);
    newItem->next = *head;
    *head = newItem;
}

// View cart
void viewCart(CartItem* head) {
    if (!head) {
        printf("Cart is empty.\n");
        return;
    }

    printf("\n--- Items in Cart ---\n");
    printCurrentDate();  // Only once
    printf("ID\tName\t\tPrice\tQty\tTotal\t\tCategory\n");
    printf("--------------------------------------------------------------\n");

    while (head) {
        printf("%d\t%-10s\t%.2f\t%d\t%.2f\t\t%s\n",
               head->id, head->name, head->price, head->quantity,
               head->price * head->quantity, head->category);
        head = head->next;
    }
}

// Remove item
void removeItem(CartItem** head, int id) {
    CartItem *temp = *head, *prev = NULL;

    while (temp && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    if (!temp) {
        printf("Item not found.\n");
        return;
    }

    if (!prev)
        *head = temp->next;
    else
        prev->next = temp->next;

    free(temp);
    printf("%d Item removed from cart.\n",id);
}

// Update quantity
void updateQuantity(CartItem* head, int id, int newQty) {
    while (head) {
        if (head->id == id) {
            head->quantity = newQty;
            printf("Quantity updated.\n");
            return;
        }
        head = head->next;
    }
    printf("Item not found.\n");
}

// Calculate total
float calculateTotal(CartItem* head) {
    float total = 0;
    while (head) {
        total += head->price * head->quantity;
        head = head->next;
    }
    return total;
}

// Checkout with date printed once
void checkout(CartItem* head) {
    if (!head) {
        printf("Cart is empty. Nothing to checkout.\n");
        return;
    }

    printf("\n--- Final Receipt ---\n");
    printCurrentDate();  // Only once

    printf("ID\tName\t\tPrice\tQty\tTotal\t\tCategory\n");
    printf("--------------------------------------------------------------\n");

    CartItem* current = head;
    while (current) {
        printf("%d\t%-10s\t%.2f\t%d\t%.2f\t\t%s\n",
               current->id, current->name, current->price, current->quantity,
               current->price * current->quantity, current->category);
        current = current->next;
    }

    printf("\nTotal Amount Due: %.2f\n", calculateTotal(head));
    printf("Thank you for shopping!\n");
}

// Clear memory
void clearCart(CartItem** head) {
    CartItem* current = *head;
    while (current) {
        CartItem* temp = current;
        current = current->next;
        free(temp);
    }
    *head = NULL;
}

// Show menu once
void printMenuOnce() {
    printf("\n=========== Shopping Cart Menu ===========\n");
    printf("1. Add Item to Cart\n");
    printf("2. View Cart\n");
    printf("3. Remove Item\n");
    printf("4. Update Item Quantity\n");
    printf("5. Checkout\n");
    printf("6. Exit\n");
    printf("==========================================\n");
}

// Print instruction
void printInstructions() {
  
}

// Simulate delay (optional)
void wait() {
    for (volatile long i = 0; i < 100000000; ++i);  // UI feel
}

int main() {
    CartItem* cart = NULL;
    int choice, id, qty;
    float price;
    char name[50], category[30];

    printMenuOnce();

    while (1) {
        printInstructions();
       
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                scanf("%d", &id);
      
                scanf(" %[^\n]", name);
            
                scanf(" %[^\n]", category);
      
                scanf("%f", &price);
                
                scanf("%d", &qty);
                addItem(&cart, id, name, price, qty, category);
                break;

            case 2:
                viewCart(cart);
                break;

            case 3:
            printf("\n");
                scanf("%d", &id);
                removeItem(&cart, id);
                break;

            case 4:
                printf("Enter item ID to update: ");
                scanf("%d", &id);
                printf("Enter new quantity: ");
                scanf("%d", &qty);
                updateQuantity(cart, id, qty);
                break;

            case 5:
                checkout(cart);
                clearCart(&cart);
                break;

            case 6:
                printf("Exiting program...\n");
                clearCart(&cart);
                return 0;

            default:
                printf("Invalid choice. Try again.\n");
        }
        wait();  // Optional pause
    }

    return 0;
}
